import sys
from collections import OrderedDict
from typing import List, Tuple

import requests as requests
from PIL import Image


# Images are generated by https://place-hold.it/
class ImageCache:
    def __init__(self, path_to_input_file: str):
        with open(path_to_input_file) as f:
            self.max_capacity, self.urls = self.read_input_data(f)
        self.capacity = self.max_capacity
        self.cache = OrderedDict[str, int]()
        self.output: List[str] = []
        self._load_input_data_to_cache()

    def _load_input_data_to_cache(self):
        for url in self.urls:
            if url in self.cache:
                self.output.append(f"{url} IN_CACHE {self.cache[url]}")
            else:
                size = self.load_image_from_internet(url)
                self.output.append(f"{url} DOWNLOADED {size}")
                if size <= self.max_capacity:
                    while self.capacity < size:
                        removed_url, removed_size = self.cache.popitem()
                        self.capacity += removed_size
                    self.cache[url] = size
                    self.capacity -= size

    @staticmethod
    def read_input_data(f) -> Tuple[int, List[str]]:
        capacity = int(f.readline())
        n = int(f.readline())
        urls: List[str] = []
        for _ in range(n):
            urls.append(f.readline().strip())
        return capacity, urls

    @staticmethod
    def load_image_from_internet(url: str) -> int:
        im = Image.open(requests.get(url, stream=True).raw)
        return sys.getsizeof(im.tobytes())


if __name__ == '__main__':
    image_cache = ImageCache('input.txt')
    for out in image_cache.output:
        print(out)